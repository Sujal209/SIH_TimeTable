export interface User {
  id: string;
  email: string;
  name: string;
  role: 'admin' | 'teacher';
  department?: string;
  phone?: string;
  created_at: string;
  updated_at: string;
}

export interface Teacher {
  id: string;
  user_id: string;
  name: string;
  email: string;
  department: string;
  phone?: string;
  max_hours_per_day: number;
  unavailable_slots: TimeSlot[];
  preferences: TeacherPreferences;
  created_at: string;
  updated_at: string;
}

export interface Subject {
  id: string;
  name: string;
  code: string;
  department: string;
  semester: number;
  hours_per_week: number;
  lab_hours_per_week: number;
  teacher_id: string;
  teacher?: Teacher;
  created_at: string;
  updated_at: string;
}

export interface Classroom {
  id: string;
  name: string;
  capacity: number;
  type: 'lecture' | 'lab' | 'seminar';
  department: string;
  equipment: string[];
  created_at: string;
  updated_at: string;
}

export interface TimeSlot {
  id: string;
  day?: DayOfWeek;
  start_time: string; // HH:mm format
  end_time: string; // HH:mm format
  duration: number; // in minutes
  is_break: boolean;
  created_at?: string;
  updated_at?: string;
}

export interface TimetableAssignment {
  id: string;
  subject_id: string;
  teacher_id: string;
  classroom_id: string;
  time_slot_id: string;
  day_of_week: number; // 0 = Sunday, 1 = Monday, etc.
  week_number: number;
  notes?: string;
  created_at?: string;
  updated_at?: string;
}

export interface TimetableView {
  id: string;
  day_of_week: number;
  week_number: number;
  notes?: string;
  created_at?: string;
  updated_at?: string;
  // Subject details
  subject_id: string;
  subject_name: string;
  subject_code: string;
  subject_department: string;
  subject_credits: number;
  subject_type: string;
  subject_color: string;
  // Teacher details
  teacher_id: string;
  teacher_name: string;
  teacher_email: string;
  teacher_phone?: string;
  teacher_department: string;
  // Classroom details
  classroom_id: string;
  classroom_name: string;
  classroom_building: string;
  classroom_floor: number;
  classroom_capacity: number;
  classroom_type: string;
  classroom_equipment: string[];
  // Time slot details
  time_slot_id: string;
  start_time: string;
  end_time: string;
  duration: number;
  is_break: boolean;
}

export interface TimetableEntry {
  id: string;
  timetable_id: string;
  subject_id: string;
  teacher_id: string;
  classroom_id: string;
  time_slot_id: string;
  day_of_week: number;
  week_number?: number;
  notes?: string;
  created_at?: string;
  updated_at?: string;
}

export interface Timetable {
  id: string;
  name: string;
  department: string;
  semester: number;
  academic_year: string;
  is_active: boolean;
  entries: TimetableEntry[];
  created_by: string;
  created_at: string;
  updated_at: string;
}

export interface TeacherPreferences {
  preferred_time_slots: string[]; // time slot IDs
  max_consecutive_hours: number;
  preferred_days: DayOfWeek[];
  break_duration: number; // in minutes
}

export interface TimetableConstraints {
  max_hours_per_day: number;
  max_consecutive_hours: number;
  break_after_hours: number;
  break_duration: number;
  lab_session_duration: number; // in slots (usually 2)
  working_days: DayOfWeek[];
}

export interface GenerationConfig {
  department: string;
  semester: number;
  academic_year: string;
  constraints: TimetableConstraints;
  teachers: Teacher[];
  subjects: Subject[];
  classrooms: Classroom[];
  time_slots: TimeSlot[];
}

export interface ConflictReport {
  teacher_conflicts: TeacherConflict[];
  classroom_conflicts: ClassroomConflict[];
  constraint_violations: ConstraintViolation[];
}

export interface TeacherConflict {
  teacher_id: string;
  teacher_name: string;
  conflicts: {
    day: DayOfWeek;
    time_slot: string;
    subjects: string[];
  }[];
}

export interface ClassroomConflict {
  classroom_id: string;
  classroom_name: string;
  conflicts: {
    day: DayOfWeek;
    time_slot: string;
    subjects: string[];
  }[];
}

export interface ConstraintViolation {
  type: 'max_hours' | 'consecutive_hours' | 'break_duration' | 'unavailable_slot';
  teacher_id?: string;
  message: string;
  severity: 'warning' | 'error';
}

export interface WhatsAppMessage {
  to: string;
  type: 'document' | 'image';
  document?: {
    link: string;
    filename: string;
  };
  image?: {
    link: string;
  };
}

export interface ExportOptions {
  format: 'pdf' | 'png';
  orientation: 'portrait' | 'landscape';
  include_teacher_details: boolean;
  include_room_details: boolean;
  title?: string;
}

export type DayOfWeek = 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday';

// Day constants matching database values
export const DAYS_OF_WEEK = {
  SUNDAY: 0,
  MONDAY: 1,
  TUESDAY: 2,
  WEDNESDAY: 3,
  THURSDAY: 4,
  FRIDAY: 5,
  SATURDAY: 6,
} as const;

export const DAY_NAMES = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'] as const;

export type UserRole = 'admin' | 'teacher';

// Timetable generation and approval status types
export type TimetableStatus = 'draft' | 'generated' | 'reviewed' | 'approved' | 'published' | 'archived';
export type GenerationStatus = 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled';
export type ShiftType = 'morning' | 'evening' | 'full_day';
export type ProgramType = 'UG' | 'PG' | 'PhD';
export type SubjectType = 'theory' | 'lab' | 'tutorial' | 'seminar';
export type AlgorithmType = 'csp' | 'genetic' | 'hybrid';
export type LeaveType = 'sick' | 'casual' | 'official' | 'maternity' | 'conference';
export type SpecialClassType = 'lab' | 'seminar' | 'guest_lecture' | 'exam' | 'workshop';
export type LeaveStatus = 'pending' | 'approved' | 'rejected';
export type SpecialClassStatus = 'active' | 'cancelled' | 'completed';
export type RecurrencePattern = 'weekly' | 'biweekly' | 'monthly' | 'once';

export type ClassroomType = 'lecture' | 'lab' | 'seminar';

export type ConflictType = 'teacher' | 'classroom' | 'constraint';

// ============================================================================
// SIH EXTENSION INTERFACES - Phase 2
// ============================================================================

// Batches/Student Groups interfaces
export interface Batch {
  id: string;
  name: string; // e.g., "CSE-A-2024", "ECE-B-2023"
  department: string;
  program_type: ProgramType;
  year: number; // 1-6
  semester: number; // 1-12
  strength: number;
  shift_type: ShiftType;
  academic_year: string; // e.g., "2024-25"
  is_active: boolean;
  notes?: string;
  created_at: string;
  updated_at: string;
}

export interface BatchSubject {
  id: string;
  batch_id: string;
  subject_id: string;
  is_elective: boolean;
  is_mandatory: boolean;
  priority: number;
  created_at: string;
  // Populated fields
  subject?: Subject;
  batch?: Batch;
}

// Faculty availability and leaves interfaces
export interface FacultyAvailability {
  id: string;
  teacher_id: string;
  day_of_week: number; // 0=Sunday, 6=Saturday
  start_time: string;
  end_time: string;
  shift_type: ShiftType;
  preference_level: number; // 1-5, 1=most preferred
  is_available: boolean;
  academic_year: string;
  created_at: string;
  updated_at: string;
  // Populated fields
  teacher?: Teacher;
}

export interface FacultyLeave {
  id: string;
  teacher_id: string;
  leave_type: LeaveType;
  start_date: string;
  end_date: string;
  reason?: string;
  is_recurring: boolean;
  recurring_day?: number; // Day of week if recurring
  recurring_start_time?: string;
  recurring_end_time?: string;
  status: LeaveStatus;
  approved_by?: string;
  academic_year: string;
  created_at: string;
  updated_at: string;
  // Populated fields
  teacher?: Teacher;
  approver?: User;
}

// Special classes interface
export interface SpecialClass {
  id: string;
  title: string;
  description?: string;
  class_type: ClassType;
  teacher_id: string;
  classroom_id: string;
  batch_id: string;
  date: string;
  start_time: string;
  end_time: string;
  priority: Priority;
  max_students?: number;
  equipment_requirements?: string;
  is_recurring: boolean;
  recurring_pattern?: string;
  recurring_end_date?: string;
  academic_year: string;
  created_at: string;
  updated_at: string;
  // Populated fields
  teacher?: Teacher;
  classroom?: Classroom;
  batch?: Batch;
}

// Timetable generation and tracking interfaces
export interface TimetableGeneration {
  id: string;
  name: string;
  department?: string;
  academic_year: string;
  semester?: number;
  algorithm_type: AlgorithmType;
  optimization_goals?: Record<string, any>;
  constraints_config?: Record<string, any>;
  status: GenerationStatus;
  progress_percentage: number;
  total_classes_scheduled: number;
  conflicts_resolved: number;
  classroom_utilization_percent?: number;
  faculty_workload_balance_score?: number;
  constraint_satisfaction_score?: number;
  started_at?: string;
  completed_at?: string;
  processing_time_seconds?: number;
  options_generated: number;
  selected_option?: number;
  timetable_status: TimetableStatus;
  approved_by?: string;
  approved_at?: string;
  published_at?: string;
  error_message?: string;
  debug_info?: Record<string, any>;
  created_by: string;
  created_at: string;
  updated_at: string;
  // Populated fields
  creator?: User;
  approver?: User;
  options?: TimetableOption[];
}

export interface TimetableOption {
  id: string;
  generation_id: string;
  option_number: number;
  classroom_utilization_percent?: number;
  faculty_workload_balance_score?: number;
  total_conflicts: number;
  total_unscheduled_classes: number;
  optimization_score?: number;
  algorithm_parameters?: Record<string, any>;
  generation_notes?: string;
  is_selected: boolean;
  created_at: string;
  // Populated fields
  generation?: TimetableGeneration;
}

// Shifts and department assignments
export interface Shift {
  id: string;
  name: string;
  code: string;
  start_time: string;
  end_time: string;
  is_active: boolean;
  departments: string[];
  description?: string;
  created_at: string;
  updated_at: string;
}

export interface DepartmentShift {
  id: string;
  department: string;
  shift_id: string;
  academic_year: string;
  is_primary: boolean;
  max_batches: number;
  created_at: string;
  // Populated fields
  shift?: Shift;
}

// Optimization constraints
export interface OptimizationConstraints {
  id: string;
  name: string;
  department?: string;
  academic_year: string;
  constraints: Record<string, any>;
  is_active: boolean;
  is_default: boolean;
  created_by: string;
  created_at: string;
  updated_at: string;
  // Populated fields
  creator?: User;
}

// Form types for React Hook Form
export interface LoginFormData {
  email: string;
  password: string;
}

export interface RegisterFormData {
  name: string;
  email: string;
  password: string;
  confirmPassword: string;
  role: UserRole;
  department?: string;
}

export interface TeacherFormData {
  name: string;
  email: string;
  department: string;
  phone?: string;
  max_hours_per_day: number;
}

export interface SubjectFormData {
  name: string;
  code: string;
  department: string;
  semester: number;
  hours_per_week: number;
  lab_hours_per_week: number;
  teacher_id: string;
}

export interface ClassroomFormData {
  name: string;
  capacity: number;
  type: ClassroomType;
  department: string;
  equipment: string[];
}

export interface TimeSlotFormData {
  day?: DayOfWeek;
  start_time: string;
  end_time: string;
  slot_type: 'class' | 'break' | 'lab';
}

export interface TimetableAssignmentFormData {
  subject_id: string;
  teacher_id: string;
  classroom_id: string;
  time_slot_id: string;
  day_of_week: number;
  notes?: string;
}

export interface CreateTimetableAssignmentData {
  subject_id: string;
  teacher_id: string;
  classroom_id: string;
  time_slot_id: string;
  day_of_week: number;
  week_number?: number;
  notes?: string;
}

export interface UpdateTimetableAssignmentData {
  subject_id?: string;
  teacher_id?: string;
  classroom_id?: string;
  time_slot_id?: string;
  day_of_week?: number;
  week_number?: number;
  notes?: string;
}

// ============================================================================
// SIH FORM DATA INTERFACES - Phase 2
// ============================================================================

// Batch form interfaces
export interface BatchFormData {
  name: string;
  department: string;
  program_type: ProgramType;
  year: number;
  semester: number;
  strength: number;
  shift_type: ShiftType;
  academic_year: string;
  notes?: string;
  subject_ids?: string[]; // For batch creation with initial subjects
}

export interface BatchSubjectFormData {
  batch_id: string;
  subject_id: string;
  is_elective: boolean;
  is_mandatory: boolean;
  priority: number;
}

// Faculty availability form interfaces
export interface FacultyAvailabilityFormData {
  teacher_id: string;
  day_of_week: number;
  start_time: string;
  end_time: string;
  shift_type: ShiftType;
  preference_level: number;
  is_available: boolean;
  academic_year: string;
}

export interface FacultyLeaveFormData {
  teacher_id: string;
  leave_type: LeaveType;
  start_date: string;
  end_date: string;
  reason?: string;
  is_recurring: boolean;
  recurring_day?: number;
  recurring_start_time?: string;
  recurring_end_time?: string;
  academic_year: string;
}

// Special class form interfaces
export interface SpecialClassFormData {
  name: string;
  class_type: SpecialClassType;
  subject_id?: string;
  teacher_id?: string;
  classroom_id: string;
  batch_id?: string;
  day_of_week: number;
  start_time: string;
  end_time: string;
  is_recurring: boolean;
  recurrence_pattern: RecurrencePattern;
  start_date: string;
  end_date?: string;
  required_equipment?: string[];
  special_requirements?: string;
  max_students?: number;
  is_mandatory: boolean;
  priority: number;
  shift_type: ShiftType;
  academic_year: string;
  notes?: string;
}

// Timetable generation form interfaces
export interface TimetableGenerationFormData {
  name: string;
  department?: string;
  academic_year: string;
  semester?: number;
  algorithm_type: AlgorithmType;
  optimization_goals?: Record<string, any>;
  constraints_config?: Record<string, any>;
}

// Shift management form interfaces
export interface ShiftFormData {
  name: string;
  code: string;
  start_time: string;
  end_time: string;
  departments: string[];
  description?: string;
}

export interface DepartmentShiftFormData {
  department: string;
  shift_id: string;
  academic_year: string;
  is_primary: boolean;
  max_batches: number;
}

// Optimization constraints form interfaces
export interface OptimizationConstraintsFormData {
  name: string;
  department?: string;
  academic_year: string;
  constraints: Record<string, any>;
  is_default: boolean;
}

// API Response types
export interface ApiResponse<T> {
  data: T;
  message: string;
  success: boolean;
}

export interface PaginatedResponse<T> {
  data: T[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
  };
}

// Theme types
export interface ThemeContextType {
  isDark: boolean;
  toggle: () => void;
}

// Auth context types
export interface AuthContextType {
  user: User | null;
  loading: boolean;
  signIn: (email: string, password: string) => Promise<void>;
  signUp: (userData: RegisterFormData) => Promise<void>;
  signOut: () => Promise<void>;
}

// Toast types
export type ToastType = 'success' | 'error' | 'warning' | 'info';

export interface ToastMessage {
  id: string;
  type: ToastType;
  title: string;
  message?: string;
  duration?: number;
}


// Batch-Subject mapping
export interface BatchSubject {
  id: string;
  batch_id: string;
  subject_id: string;
  is_elective: boolean;
  is_mandatory: boolean;
  priority: number;
  created_at: string;
  // Populated data
  batch?: Batch;
  subject?: Subject;
}

// Faculty Availability
export interface FacultyAvailability {
  id: string;
  teacher_id: string;
  day_of_week: number;
  start_time: string;
  end_time: string;
  shift_type: ShiftType;
  preference_level: number; // 1-5, 1 being most preferred
  is_available: boolean;
  academic_year: string;
  created_at: string;
  updated_at: string;
  // Populated data
  teacher?: Teacher;
}

// Faculty Leaves
export interface FacultyLeave {
  id: string;
  teacher_id: string;
  leave_type: LeaveType;
  start_date: string;
  end_date: string;
  reason?: string;
  is_recurring: boolean;
  recurring_day?: number;
  recurring_start_time?: string;
  recurring_end_time?: string;
  status: LeaveStatus;
  approved_by?: string;
  academic_year: string;
  created_at: string;
  updated_at: string;
  // Populated data
  teacher?: Teacher;
  approver?: User;
}

// Special Classes with Fixed Slots
export interface SpecialClass {
  id: string;
  name: string;
  class_type: SpecialClassType;
  subject_id?: string;
  teacher_id?: string;
  classroom_id: string;
  batch_id?: string;
  day_of_week: number;
  start_time: string;
  end_time: string;
  duration_minutes: number;
  is_recurring: boolean;
  recurrence_pattern: RecurrencePattern;
  start_date: string;
  end_date?: string;
  required_equipment: string[];
  special_requirements?: string;
  max_students?: number;
  is_mandatory: boolean;
  priority: number;
  shift_type: ShiftType;
  academic_year: string;
  status: SpecialClassStatus;
  notes?: string;
  created_by?: string;
  created_at: string;
  updated_at: string;
  // Populated data
  subject?: Subject;
  teacher?: Teacher;
  classroom?: Classroom;
  batch?: Batch;
  creator?: User;
}

// Timetable Generation Tracking
export interface TimetableGeneration {
  id: string;
  name: string;
  department?: string;
  academic_year: string;
  semester?: number;
  algorithm_type: AlgorithmType;
  optimization_goals?: Record<string, any>;
  constraints_config?: Record<string, any>;
  status: GenerationStatus;
  progress_percentage: number;
  total_classes_scheduled: number;
  conflicts_resolved: number;
  classroom_utilization_percent?: number;
  faculty_workload_balance_score?: number;
  constraint_satisfaction_score?: number;
  started_at?: string;
  completed_at?: string;
  processing_time_seconds?: number;
  options_generated: number;
  selected_option?: number;
  timetable_status: TimetableStatus;
  approved_by?: string;
  approved_at?: string;
  published_at?: string;
  error_message?: string;
  debug_info?: Record<string, any>;
  created_by: string;
  created_at: string;
  updated_at: string;
  // Populated data
  creator?: User;
  approver?: User;
  options?: TimetableOption[];
}

// Timetable Options (multiple generated solutions)
export interface TimetableOption {
  id: string;
  generation_id: string;
  option_number: number;
  classroom_utilization_percent?: number;
  faculty_workload_balance_score?: number;
  total_conflicts: number;
  total_unscheduled_classes: number;
  optimization_score?: number;
  algorithm_parameters?: Record<string, any>;
  generation_notes?: string;
  is_selected: boolean;
  created_at: string;
  // Populated data
  generation?: TimetableGeneration;
}

// Institutional Shifts
export interface Shift {
  id: string;
  name: string;
  code: string;
  start_time: string;
  end_time: string;
  is_active: boolean;
  departments: string[];
  description?: string;
  created_at: string;
  updated_at: string;
}

// Department-Shift Assignments
export interface DepartmentShift {
  id: string;
  department: string;
  shift_id: string;
  academic_year: string;
  is_primary: boolean;
  max_batches: number;
  created_at: string;
  // Populated data
  shift?: Shift;
}

// Optimization Constraints Configuration
export interface OptimizationConstraints {
  id: string;
  name: string;
  department?: string;
  academic_year: string;
  constraints: Record<string, any>;
  is_active: boolean;
  is_default: boolean;
  created_by: string;
  created_at: string;
  updated_at: string;
  // Populated data
  creator?: User;
}

// Enhanced interfaces for existing entities
export interface EnhancedTeacher extends Teacher {
  max_daily_hours: number;
  max_consecutive_hours: number;
  preferred_shifts: string[];
  leave_balance_days: number;
  avg_leaves_per_month: number;
  // Related data
  availability?: FacultyAvailability[];
  leaves?: FacultyLeave[];
}

export interface EnhancedSubject extends Subject {
  credits: number;
  subject_type: SubjectType;
  min_students_required: number;
  max_students_allowed: number;
  // Related data
  batch_mappings?: BatchSubject[];
}

export interface EnhancedClassroom extends Classroom {
  building?: string;
  floor: number;
  is_lab: boolean;
  shift_availability: string[];
  maintenance_hours: string[];
}

export interface EnhancedTimeSlot extends TimeSlot {
  shift_type: ShiftType;
  is_fixed_slot: boolean;
  slot_type: 'class' | 'break' | 'lab' | 'lunch';
}

// Form interfaces for creating/editing SIH entities
export interface BatchFormData {
  name: string;
  department: string;
  program_type: ProgramType;
  year: number;
  semester: number;
  strength: number;
  shift_type: ShiftType;
  academic_year: string;
  notes?: string;
  subject_ids: string[]; // For batch-subject mapping
}

export interface FacultyAvailabilityFormData {
  teacher_id: string;
  day_of_week: number;
  start_time: string;
  end_time: string;
  shift_type: ShiftType;
  preference_level: number;
  is_available: boolean;
  academic_year: string;
}

export interface FacultyLeaveFormData {
  teacher_id: string;
  leave_type: LeaveType;
  start_date: string;
  end_date: string;
  reason?: string;
  is_recurring: boolean;
  recurring_day?: number;
  recurring_start_time?: string;
  recurring_end_time?: string;
  academic_year: string;
}

export interface SpecialClassFormData {
  title: string;
  description?: string;
  class_type: ClassType;
  teacher_id: string;
  classroom_id: string;
  batch_id: string;
  date: string;
  start_time: string;
  end_time: string;
  priority: Priority;
  max_students?: number;
  equipment_requirements?: string;
  is_recurring: boolean;
  recurring_pattern?: string;
  recurring_end_date?: string;
  academic_year: string;
}

export interface TimetableGenerationFormData {
  name: string;
  department?: string;
  academic_year: string;
  semester?: number;
  algorithm_type: AlgorithmType;
  optimization_goals?: Record<string, any>;
  constraints_config?: Record<string, any>;
}

// Analytics and reporting interfaces
export interface UtilizationMetrics {
  classroom_utilization: Record<string, number>;
  teacher_workload: Record<string, number>;
  batch_schedule_density: Record<string, number>;
  shift_distribution: Record<string, number>;
  subject_hour_compliance: Record<string, number>;
}

export interface ConflictAnalysis {
  teacher_conflicts: Array<{
    teacher_id: string;
    teacher_name: string;
    conflicts: Array<{
      day: number;
      time_slot: string;
      conflicting_subjects: string[];
    }>;
  }>;
  classroom_conflicts: Array<{
    classroom_id: string;
    classroom_name: string;
    conflicts: Array<{
      day: number;
      time_slot: string;
      conflicting_batches: string[];
    }>;
  }>;
  constraint_violations: Array<{
    type: string;
    severity: 'warning' | 'error';
    description: string;
    affected_entities: string[];
  }>;
}

export interface OptimizationResult {
  success: boolean;
  options: TimetableOption[];
  metrics: UtilizationMetrics;
  conflicts: ConflictAnalysis;
  processing_time: number;
  algorithm_used: AlgorithmType;
  constraints_satisfied: number;
  total_constraints: number;
  recommendations: string[];
}

 
 / /   = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 / /   T I M E T A B L E   G E N E R A T I O N   S Y S T E M   T Y P E S 
 / /   = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 
 / /   T i m e t a b l e   E n t r y   -   R e p r e s e n t s   a   s c h e d u l e d   p e r i o d   i n   t h e   t i m e t a b l e 
 e x p o r t   i n t e r f a c e   T i m e t a b l e E n t r y   { 
     i d :   s t r i n g ; 
     b a t c h _ i d :   s t r i n g ; 
     s u b j e c t _ i d :   s t r i n g   |   n u l l ; 
     t e a c h e r _ i d :   s t r i n g   |   n u l l ; 
     c l a s s r o o m _ i d :   s t r i n g   |   n u l l ; 
     t i m e _ s l o t _ i d :   s t r i n g ; 
     d a y _ o f _ w e e k :   n u m b e r ;   / /   0 - 6   ( S u n d a y   t o   S a t u r d a y ) 
     a c a d e m i c _ y e a r :   s t r i n g ; 
     i s _ l a b :   b o o l e a n ; 
     i s _ b r e a k :   b o o l e a n ; 
     i s _ l u n c h :   b o o l e a n ; 
     s p e c i a l _ c l a s s _ i d :   s t r i n g   |   n u l l ; 
     d u r a t i o n _ m i n u t e s :   n u m b e r ; 
     c r e a t e d _ a t :   s t r i n g ; 
     u p d a t e d _ a t :   s t r i n g ; 
     
     / /   J o i n e d   d a t a   f r o m   r e l a t e d   t a b l e s 
     s u b j e c t ? :   S u b j e c t ; 
     t e a c h e r ? :   T e a c h e r ; 
     c l a s s r o o m ? :   C l a s s r o o m ; 
     t i m e _ s l o t ? :   T i m e S l o t ; 
     b a t c h ? :   B a t c h ; 
     s p e c i a l _ c l a s s ? :   S p e c i a l C l a s s ; 
 } 
 
 / /   O p t i o n s   f o r   t i m e t a b l e   g e n e r a t i o n 
 e x p o r t   i n t e r f a c e   T i m e t a b l e G e n e r a t i o n O p t i o n s   { 
     a c a d e m i c Y e a r :   s t r i n g ; 
     c l e a r E x i s t i n g ? :   b o o l e a n ; 
     m a x T e a c h e r H o u r s P e r D a y ? :   n u m b e r ; 
     i n c l u d e L u n c h B r e a k ? :   b o o l e a n ; 
     r e s p e c t F a c u l t y A v a i l a b i l i t y ? :   b o o l e a n ; 
     i n c l u d e S p e c i a l C l a s s e s ? :   b o o l e a n ; 
 } 
 
 / /   R e s u l t   o f   t i m e t a b l e   g e n e r a t i o n 
 e x p o r t   i n t e r f a c e   T i m e t a b l e G e n e r a t i o n R e s u l t   { 
     s u c c e s s :   b o o l e a n ; 
     e r r o r ? :   s t r i n g ; 
     t i m e t a b l e E n t r i e s ? :   T i m e t a b l e E n t r y [ ] ; 
     c o n f l i c t s ? :   T i m e t a b l e C o n f l i c t [ ] ; 
     s t a t i s t i c s ? :   { 
         t o t a l S l o t s :   n u m b e r ; 
         s c h e d u l e d S l o t s :   n u m b e r ; 
         u t i l i z a t i o n :   n u m b e r ; 
         c o n f l i c t s :   n u m b e r ; 
         s u b j e c t s :   n u m b e r ; 
         t e a c h e r s :   n u m b e r ; 
         c l a s s r o o m s :   n u m b e r ; 
     } ; 
     g e n e r a t e d A t :   s t r i n g ; 
     c o n s t r a i n t s ? :   a n y ; 
 } 
 
 / /   T y p e s   o f   c o n f l i c t s   t h a t   c a n   o c c u r   d u r i n g   g e n e r a t i o n 
 e x p o r t   t y p e   C o n f l i c t T y p e   =   
     |   ' T E A C H E R _ C O N F L I C T '   
     |   ' C L A S S R O O M _ C O N F L I C T '   
     |   ' I N S U F F I C I E N T _ P E R I O D S '   
     |   ' S P E C I A L _ C L A S S _ C O N F L I C T '   
     |   ' T E A C H E R _ O V E R L O A D ' ; 
 
 / /   C o n f l i c t   i n f o r m a t i o n 
 e x p o r t   i n t e r f a c e   T i m e t a b l e C o n f l i c t   { 
     t y p e :   C o n f l i c t T y p e ; 
     d e s c r i p t i o n :   s t r i n g ; 
     d a y ? :   n u m b e r ; 
     t i m e S l o t ? :   s t r i n g ; 
     i n v o l v e d E n t i t i e s ? :   s t r i n g [ ] ; 
 } 
 
 / /   V i e w   s t r u c t u r e   f o r   t i m e t a b l e   d i s p l a y 
 e x p o r t   i n t e r f a c e   T i m e t a b l e V i e w   { 
     b a t c h I d :   s t r i n g ; 
     a c a d e m i c Y e a r :   s t r i n g ; 
     e n t r i e s :   T i m e t a b l e E n t r y [ ] ; 
     g r o u p e d B y D a y ? :   {   [ k e y :   n u m b e r ] :   T i m e t a b l e E n t r y [ ]   } ; 
     s t a t i s t i c s ? :   { 
         t o t a l E n t r i e s :   n u m b e r ; 
         s u b j e c t E n t r i e s :   n u m b e r ; 
         l a b E n t r i e s :   n u m b e r ; 
         b r e a k E n t r i e s :   n u m b e r ; 
         l u n c h E n t r i e s :   n u m b e r ; 
         s p e c i a l C l a s s E n t r i e s :   n u m b e r ; 
         u n i q u e S u b j e c t s :   n u m b e r ; 
         u n i q u e T e a c h e r s :   n u m b e r ; 
         u n i q u e C l a s s r o o m s :   n u m b e r ; 
         u t i l i z a t i o n :   n u m b e r ; 
     } ; 
     g e n e r a t e d A t :   s t r i n g ; 
 }  
 
 
 / /   A d d i t i o n a l   t y p e s   f o r   S p e c i a l   C l a s s e s   p a g e 
 e x p o r t   t y p e   C l a s s T y p e   =   ' l a b '   |   ' s e m i n a r '   |   ' w o r k s h o p '   |   ' g u e s t _ l e c t u r e '   |   ' e x a m ' ; 
 e x p o r t   t y p e   P r i o r i t y   =   ' h i g h '   |   ' m e d i u m '   |   ' l o w ' ;  
 